{
    "contents" : "---\ntitle: \"Multilevel Regression Modelling with library(lme4)\"\nauthor: John Doe\ndate: March 22, 2005\noutput: slidy_presentation\n---\n\n\n# Reproducible Simulation\n\n```{r}\nlibrary(igraph)\n\npar(mar = c(0, 0, 0, 0), oma=c(0,0,0,0), mfrow = c(1, 2)) \n# Nested model, single obs, classification diagram\nnames <- c(\"MAJOR\",\"STUDENT\",\"MEASUREMENT OBS\")\nM <- matrix(data = 0, nrow=3, ncol=3, dimnames = list(names, names))\nM[3,2] <- 1; M[2,1] <- 1\nM <- graph.adjacency(M, mode=\"directed\",diag=FALSE)\nV(M)$size <- c(80,100,200)\nnode_pos <- matrix(data=c(1,1,1,3,2,1), nrow=3, ncol=2, byrow=FALSE)\nplot(M, layout=node_pos, vertex.shape = \"crectangle\", vertex.size2=50)\n\n# Nested model, signle obs, unit diagram\nnames <- c(\"MATH\", \"STAT\",\"CS\", paste0(\"S_\",as.character(seq(1,5)),sep=\"\"), rep(\"\",5))\nM <- matrix(data = 0, nrow = 13, ncol = 13, byrow = TRUE, dimnames=list(names,names))\nM[4:5,1] <- 1; M[6:7,2] <- 1; M[8,3] <- 1\nM <- graph.adjacency(M, mode=\"directed\",diag=FALSE)\nV(M)$size <- c(60, 60, 20, rep(40, 5), rep(0,5))\nnode_pos <- matrix(c( (1+2)/2,3, (3+4)/2,3, 5,3, \n                     1,2, 2,2, 3,2, 4,2, 5,2,\n                     1,1.9, 2,1.9, 3,1.9, 4,1.9, 5,1.9), byrow=TRUE, ncol=2)\nplot.igraph(M, layout = node_pos, vertex.shape=\"rectangle\")\n```\n\n## Reproducibility \n\n* Same script\n* Same results\n* Anywhere\n    + Single thread\n    + Multi-core\n    + Cloud Scale\n\n## Everything starts with a seed.\nSimulation is based off Pseudo-random number generation (PRNG).\n\n* PRNG is sequential, next number depends on the last state.\n* Seeds are used to store the state of a random number generator\n* by 'Setting a seed' one can place a PRNG into any exact state.\n\n## Parallel Random Number Generation\nSimulation is complicated in new parallel environments.\n \n* PRNG is sequential,\n* parallel execution is not,\n* and order of execution is not guaranteed.\n\nThis is where parallel pseudo-random number generators help out.\n\n## Parallel PRNG\nParallel pseudo-random number generators start with a singe state that\ncan spawn additional streams as well as streams of random numbers.\n\n1. SPRNG\n2. L'Ecuyer combined multiple-recursive generator\n\n# Introducing `harvestr`\n\n## R package `harvestr`\n<https://github.com/halpo/harvestr>\n\nWhat `harvestr` does:\n\n* Reproducibility\n* Caching\n* Under parallelized environments.\n\n------\n\n\\titlepage\n\n",
    "created" : 1450303094783.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2644041125",
    "id" : "58895CD",
    "lastKnownWriteTime" : 1450302802,
    "path" : "~/Desktop/to_save/lmer_tutorial/lme4_tutorial_1/template.Rmd",
    "project_path" : "lme4_tutorial_1/template.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_markdown"
}